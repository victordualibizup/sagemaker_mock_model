#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import json
import os
import pickle
import sys
import traceback

import pandas as pd
from sklearn import tree

import os

import fire

from sg_custom_catboost import data_manager, modelling, utils
from sg_custom_catboost.config.core import PROCESSED_DATASET_DIR, config


# These are the paths to where SageMaker mounts interesting things in your container.
#
prefix = '/opt/ml/'
#
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')
#
# # This algorithm has a single channel of input data called 'training'. Since we run in
# # File mode, the input files are copied to the directory specified here.
channel_name = 'training'
training_path = os.path.join(input_path, channel_name)
#

# The function to execute the training.
# TODO: REFACTOR THIS FUNCTION
def train():
    """

    Returns
    -------

    """
    processed_train_data = utils.filter_dataframe(
        data_manager.load_dataset(
            file_name=config.app_config.latest_train_data, raw_data=False
        )
    )

    trained_model_data_dict = modelling.processed_training_model(processed_train_data)

    model = trained_model_data_dict[config.app_config.model_data_model]

    # TODO: CREATE MODEL TIMESTAMP AND LATEST
    with open(os.path.join(model_path, 'catboost-model.pkl'), 'wb') as out:
        pickle.dump(model, out)
    print('Training complete.')


if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
